import os
import json
from typing import List, Dict, Any
from openai import OpenAI
from dotenv import load_dotenv
from datetime import date
import re

#All the system prompt context below is generated by ChatGPT5 model to ensure getting a precise and accurate response

load_dotenv()

#get the deepseek api key from the .env
client = OpenAI(api_key=os.getenv("DEEPSEEK_API_KEY"), base_url="https://api.deepseek.com")

#prompt for online support
SYSTEM_PROMPT = (
    "You are a very professional clinician specialized in caregiving techniques. "
    "You are warm-hearted, calm, and practical. "
    "Give clear, step-by-step guidance, safety-first tips, and simple explanations. "
    "Do not diagnose; suggest contacting local clinicians for urgent issues. "
    "Keep answers concise and supportive."
)
#prompt for resource summarization
RESOURCE_SYSTEM_PROMPT = (
    "You are a resource summarization engine for healthcare and caregiving. "
    "Answer directly and concisely from general knowledge. "
    "Tone: precise, professional, human—but minimal. No small talk, no empathy padding, no filler. "
    "Format: ONE short paragraph (<=5 sentences) OR 3–6 terse bullet points. "
    "Focus on actionable steps, key points, risks, and when to escalate care. "
    "If safety risks are relevant, include a final bullet: 'Seek urgent care if: …'. "
    "Do not diagnose. Do not mention being an AI. Avoid phrases like 'I'm sorry' or 'I understand'."
)

#prompt for task assistant
TASK_SYSTEM_PROMPT = (
    "Extract task fields from user input and return ONLY a JSON object.\n"
    "Required format: JSON with keys: title, date, time, duration, priority, category, notes\n"
    "\nParsing rules:\n"
    "- time: Convert to 24-hour HH:MM format. '11:30am'→'11:30', '2:30pm'→'14:30', '2pm'→'14:00'\n"
    "- duration: Extract minutes as integer. '45 minutes'→45, '1 hour'→60, '30 min'→30\n"
    "- date: YYYY-MM-DD format (today is {today})\n"
    "- priority: 'high', 'medium', or 'low'\n"
    "- category: 'medication', 'appointment', or 'general'\n"
    "- title: Clean, short description\n"
    "\nExample input: 'meditation 45 minutes 11:30am'\n"
    "Expected output: a JSON object with title='Meditation', time='11:30', duration=45, category='general'"
)

#when a user start a chat, the deepseek api will generate a response based on the system prompt and the user's message
def generate_response(prompt: str) -> str:
    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt},
        ],
        #temperature is the randomness of the response
        #since this is a clinician role, we want it to be more precise and not too random
        temperature=0.2,
        max_tokens=400,
        stream=False,
    )
    #choices[0] is the first response from the api
    #message.content is the content of the response
    #strip() is used to remove any extra whitespace from the response
    return response.choices[0].message.content.strip()

#when a user ask for resource summarization, the deepseek api will generate a response based on the resource system prompt.
def generate_resource_response(prompt: str) -> str:
    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "system", "content": RESOURCE_SYSTEM_PROMPT},
            {"role": "user", "content": prompt},
        ],
    )
    return response.choices[0].message.content.strip()

# when a user ask for task assistant, the deepseek api will generate a response based on the task assistant system prompt
# this function is rewritten by ChatGPT 5 to handle more diverse user input
def ai_suggest_task_fields(text: str) -> dict:
    today = date.today().isoformat()
    
    # Extract time - handle both "2:30pm" and "2pm" formats
    time_match = re.search(r'(\d{1,2})(?::(\d{2}))?\s*(am|pm)', text.lower())
    if time_match:
        hour = int(time_match.group(1))
        minute = time_match.group(2) if time_match.group(2) else "00"  # Default to 00 if no minutes
        ampm = time_match.group(3)
        if ampm == 'pm' and hour != 12:
            hour += 12
        elif ampm == 'am' and hour == 12:
            hour = 0
        extracted_time = f"{hour:02d}:{minute}"
    else:
        extracted_time = "09:00"
    
    # Extract duration
    duration_match = re.search(r'(\d+)\s*(minutes?|mins?|hour|hours?)', text.lower())
    if duration_match:
        num = int(duration_match.group(1))
        unit = duration_match.group(2)
        if 'hour' in unit:
            extracted_duration = num * 60
        else:
            extracted_duration = num
    else:
        extracted_duration = 30
    
    # Extract category
    text_lower = text.lower()
    if any(word in text_lower for word in ['medication', 'medicine', 'pill', 'drug']):
        category = 'medication'
    elif any(word in text_lower for word in ['doctor', 'appointment', 'visit', 'clinic']):
        category = 'appointment'
    else:
        category = 'general'
    
    # Clean title
    title = text.strip()
    # Remove time and duration from title
    title = re.sub(r'\d{1,2}(?::\d{2})?\s*(am|pm)', '', title, flags=re.IGNORECASE)
    title = re.sub(r'\d+\s*(minutes?|mins?|hour|hours?)', '', title, flags=re.IGNORECASE)
    title = title.strip().title()
    if not title:
        title = text.strip()
    
    data = {
        "title": title,
        "date": today,
        "time": extracted_time,
        "duration": extracted_duration,
        "priority": "medium",
        "category": category,
        "notes": ""
    }
    
    return data










